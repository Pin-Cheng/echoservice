apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "echoservice.fullname" . }}
  labels:
    {{- include "echoservice.labels" . | nindent 4 }}
spec:
  strategy:
    type: RollingUpdate
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "echoservice.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "echoservice.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "echoservice.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.deployment.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /{{ .Release.Namespace }}{{ .Values.deployment.readinessProbe.httpGet.path }}
              port: {{ .Values.deployment.port }}
            initialDelaySeconds: 30
            failureThreshold: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /{{ .Release.Namespace }}{{ .Values.deployment.readinessProbe.httpGet.path }}
              port: {{ .Values.deployment.port }}
            initialDelaySeconds: 30
            failureThreshold: 30
            periodSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          # volumeMounts:
          # - name: config
          #   mountPath: "/app/resources/application.yml"
          #   subPath: "application.yml"
          #   readOnly: true
          # - name: config
          #   mountPath: "/app/resources/bootstrap.yml"
          #   subPath: "bootstrap.yml"
          #   readOnly: true
          # - name: google-services
          #   mountPath: "/app/resources/google-services.json"
          #   subPath: "google-services.json"

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # volumes:
      # - name: config
      #   configMap:
      #     name: {{ include "echoservice.fullname" . }}
      #     items:
      #     - key: "application.yml"
      #       path: "application.yml"
      #     # - key: "bootstrap.yml"
      #     #   path: "bootstrap.yml"
      # - name: google-services
      #   secret:
      #     secretName: google-services
      #     items:
      #     - key: "google-services.json"
      #       path: "google-services.json"
